import pywt
import numpy as np

def get_shannon_entropy(coefficients):
    """
    Calculates the Shannon Entropy for wavelet coefficients.

    Shannon Entropy is a measure of the uncertainty associated with the energy
    distribution of wavelet coefficients. The formula used is based on Equation A.12
    from the provided document:

        S_entropy(n) = -Î£ (p_i * log2(p_i))

    Where:
    - p_i is the normalized probability of the energy of coefficient i,
      calculated as |c_i|^2 / E, with E being the total energy.
    - Only values of p_i > 0 are considered, as log2(0) is not defined.

    Parameters:
        coefficients (array): Array containing the wavelet transform coefficients.

    Returns:
        float: Calculated Shannon entropy value.
    """
    # Calculate the total energy of the coefficients (E)
    total_energy = np.sum(np.abs(coefficients) ** 2)
    
    # Calculate the probabilities p_i as normalized energy
    probabilities = (np.abs(coefficients) ** 2) / total_energy
    
    # Remove probability values equal to 0 to avoid log2(0)
    probabilities = probabilities[probabilities > 0]
    
    # Calculate Shannon entropy using the formula
    entropy = -np.sum(probabilities * np.log2(probabilities))/total_energy
    
    return entropy


def select_best_wavelet(signal, wavelets):
    """
    Selects the best mother wavelet based on Minimum Shannon Entropy (MEC).

    This function tests different available mother wavelets and calculates the Shannon
    entropy for the coefficients generated by each wavelet. The wavelet with the lowest
    entropy is selected as the best.

    Parameters:
        signal (array): Input signal (e.g., bearing vibration).
        wavelets (list): List of mother wavelets to test.

    Returns:
        tuple: Best wavelet and the value of the lowest entropy.
    """
    best_wavelet = None
    lowest_entropy = float('inf')  # Initialize with a high value

    # Iterate over the available wavelets
    for wavelet in wavelets:
        # Decompose the signal using Continuous Wavelet Transform (CWT)
        coefficients, _ = pywt.cwt(signal, scales=np.arange(1, len(signal) + 1), wavelet=wavelet)
        
        # Calculate Shannon entropy for the coefficients
        entropy = calculate_shannon_entropy(coefficients.flatten())  # Flatten to convert to 1D
        
        # Check if this wavelet generates a lower entropy
        if entropy < lowest_entropy:
            lowest_entropy = entropy
            best_wavelet = wavelet

    return best_wavelet, lowest_entropy


